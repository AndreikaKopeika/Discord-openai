import discord
from discord.ext import commands
import openai
import random
import asyncio
from datetime import datetime
from openaibot import *

# –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
ended = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Intents –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–∞–∫—Ü–∏–π
intents = discord.Intents.default()
intents.message_content = True
intents.messages = True  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
intents.reactions = True  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å ID –∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
allowed_channels = [1283777756857106533]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º intents
bot = commands.Bot(command_prefix='!', intents=intents)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ
async def send_payment_reminder():
    while True:
        await asyncio.sleep(60)
        if ended:
            for guild in bot.guilds:
                for channel in guild.text_channels:
                    if channel.id in allowed_channels:
                        permissions = channel.permissions_for(guild.me)
                        if permissions.send_messages:
                            pass
                            # await channel.send("–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–ª–∞—Ç–∏—Ç—å! üòè –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –∑–∞ –Ω–µ—É–ø–ª–∞—Ç—É! –í—Å–µ–≥–æ 50 —Ü–µ–Ω—Ç–æ–≤!")
                        else:
                            print(f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel.name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}")

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f'Bot {bot.user} is ready.')

    guilds = bot.guilds
    if not guilds:
        print("–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    guild = random.choice(guilds)

    text_channels = [channel for channel in guild.text_channels if channel.id in allowed_channels]
    if not text_channels:
        print(f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    channel = random.choice(text_channels)
    bot.loop.create_task(send_payment_reminder())

    if not ended:
        await channel.send(f'@everyone –ë–æ—Ç {bot.user} —Ç–µ–ø–µ—Ä—å –æ–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üçç')
    else:
        pass
        # await channel.send(f'–ë–æ—Ç {bot.user} —Ç–µ–ø–µ—Ä—å –æ–Ω–ª–∞–π–Ω, –Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –∑–∞–ø–ª–∞—Ç–∏—Ç—å...üòí')

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
@bot.event
async def on_message(message):
    if not ended:
        if message.channel.id in allowed_channels and message.author != bot.user:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message_content = message.content

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ OpenAI –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response_text = await process_message_in_openai(message_content, message.author, current_time)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if bot.user in message.mentions or message.reference or '–±–æ—Ç' in message.content.lower():
                if response_text:
                    sent_message = await message.channel.send(response_text)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ—Ç–∞
                    await sent_message.add_reaction("üëç")
                    await sent_message.add_reaction("üëé")
                    await sent_message.add_reaction("üîÑ")

            await bot.process_commands(message)
    else:
        if message.author != bot.user and message.channel.id in allowed_channels:
            if random.randint(0, 3) == 1:
                await message.channel.send("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –∑–∞–º—É—Ç–∏–ª–∏!")

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏
@bot.event
async def on_reaction_add(reaction, user):
    if user == bot.user:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞

    message = reaction.message
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    if message.channel.id in allowed_channels and message.author == bot.user:
        if str(reaction.emoji) == "üëç":
            new_response_text = await process_message_in_openai(message.content, user, current_time, event_type="–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await message.reply(new_response_text)
        elif str(reaction.emoji) == "üëé":
            new_response_text = await process_message_in_openai(message.content, user, current_time, event_type="–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await message.reply(new_response_text)
        elif str(reaction.emoji) == "üîÑ":
            new_response_text = await process_message_in_openai(message.content, user, current_time, event_type="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
            await message.edit(content=new_response_text)

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.event
async def on_message_edit(before, after):
    if before.author == bot.user:
        return

    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    edit_info = f"–ë—ã–ª–æ: {before.content}, —Å—Ç–∞–ª–æ: {after.content}"

    if before.channel.id in allowed_channels:
        resp = await process_message_in_openai(edit_info, before.author, current_time, event_type="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        await before.reply(resp)

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.event
async def on_message_delete(message):
    if message.channel.id in allowed_channels:
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        resp = await process_message_in_openai(message.content, message.author, current_time, event_type="–£–¥–∞–ª–µ–Ω–∏–µ")
        await message.channel.send(resp)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_DISCORD_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω)
bot.run('YOUR_DISCORD_TOKEN')
