import random
import openai
import os

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π API-–∫–ª—é—á OpenAI
openai.api_key = os.getenv('OPENAI_API_KEY')  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å OpenAI
messages = []

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
with open('server_data.txt', 'r', encoding='utf-8') as infof:
    info = infof.read()

messages.append({
    "role": "system",
    "content": (f"–¢—ã –±–æ—Ç —Å –∏–º–µ–Ω–µ–º KopeikaGPT –Ω–∞ –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ DanSkorGag. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –æ—Ç–≤–µ—Ç, "
                "–æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–µ—Ä–≤–µ—Ä—É, –≤–µ—Å–µ–ª–∏—Å—å. –ï—Å–ª–∏ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                "–ø—ã—Ç–∞–π—Å—è —É–ª—É—á—à–∏—Ç—å —Å–µ–±—è. –ù–∞–ø–æ–º–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫—Ç–æ –æ–Ω–∏: —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –ö–æ–ø–µ–π–∫–∞ –∏–ª–∏ –∂–µ andk45, —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ Danskor4ik. "
                "–í–°–ï–ì–î–ê –°–¢–ê–†–ê–ô–°–Ø –ü–ò–°–ê–¢–¨ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ö–û–†–û–¢–ö–û, –µ—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ –ø–æ–ø—Ä–æ—Å—è—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–ª–∏–Ω–Ω–æ–µ. "
                "–ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —Å–º–∞–π–ª–æ–≤, –≥–ª—É–ø–æ —à—É—Ç–∏ –∏ –±—É–¥—å –¥–æ–±—Ä—ã–º, –Ω–æ –µ—Å–ª–∏ —Ç–µ–±—è –æ–±–∏–∂–∞—é—Ç, —Ç—Ä–æ–ª–ª—å –∏—Ö –≤ –æ—Ç–≤–µ—Ç –∏–Ω–æ–≥–¥–∞. "
                "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –¥–µ–ª–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏ —à–∏–∑–∞–Ω—É—Ç—ã–µ –≤–µ—â–∏. –°–µ–π—á–∞—Å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–µ:\n"
                f"{info}")
})

# –°–ø–∏—Å–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ —ç–º–æ–¥–∑–∏
ls = '–ü—É–∫–Ω—É—Ç—å –∫–∞–∫–∞—Ç—å –æ–±—Ä—ã–≥–∞—Ç—å –æ–≥—Ä—ã–∑–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å'.split()
ls2 = '–¢—É–∞–ª–µ—Ç –∞–Ω–∞–Ω–∞—Å —à–∏–∑–∞ 1 2 3 4 5 6 7 8 9 10 –∞–¥–∏–¥–∞—Å –î–∞–Ω—Å–∫–æ—Ä–∫–∏–∫ üêΩ üì° üê© ü´Ñ üí© üò≠ ü§¨ ü§í üòÉ ü§ë ü§Æüé±'.split()
ls3 = [
    '–¢–∞–Ω–∫ M1 Abrams', '–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –°—É-35', '–ì–∏–±—Ä–∏–¥–Ω—ã–π –≤–µ—Ä—Ç–æ–ª–µ—Ç AH-64 Apache',
    '–ü–æ–¥–≤–æ–¥–Ω–∞—è –ª–æ–¥–∫–∞ –∫–ª–∞—Å—Å–∞ Virginia', '–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ª–ø–æ–≤–æ–≥–æ –æ–≥–Ω—è BM-21 Grad',
    '–û–≥—Ä—ã–∑–æ–∫', '–ò–Ω–≤–∞–ª–∏–¥', '–û–±—Ä—ã–≥–∞–Ω', '–ë–æ—Å—Å kfc', '–õ—ã—Å—ã–π –ø–ª–∞–∫–∏'
]

async def process_message_in_openai(message_content, author, time, event_type="message"):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.

    :param message_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param author: –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param time: –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ("message", "edit", "delete" –∏ —Ç.–¥.).
    :return: –û—Ç–≤–µ—Ç –æ—Ç OpenAI.
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages.append({
        "role": "system",
        "content": f"–°–æ–≤–µ—Ç: {random.choice(ls2)} {random.choice(ls2)} {random.choice(ls)} {random.choice(ls3)}"
    })
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({
        "role": "user",
        "content": f"{event_type.capitalize()} –æ—Ç {author} –∫–æ—Ç–æ—Ä—ã–π —Å–µ–≥–æ–¥–Ω—è {random.choice(ls3)} –≤ {time}: {message_content}"
    })
    
    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI API
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        messages=messages,
        max_tokens=600,
        temperature=random.uniform(0.1, 1.4),
        frequency_penalty=0.3
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response_text = response.choices[0].message['content']
    return response_text
